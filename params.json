{"name":"Application","tagline":"","body":"## IMaint\r\nIMaint is a piece of software used to improve maintenance management in property management companies. It is designed to keep track of work orders, monitor assets condition, manage inventory, improve billing and closing.  \r\n\r\n## Classes\r\nThe current version contains the following classes:\r\n\r\n### Appliance\r\nis a superclass for appliances.  The class creates on object of appliances and takes manufacturer, serial number, and model number \r\ninformation.\r\n\r\n```java\r\npublic class Appliance\r\n{\r\n    private String model;\r\n    private String serial;\r\n    private String manufacturer;\r\n\r\n    /**\r\n     * Constructor for objects of class Appliance used when no info about an appliance is provided\r\n     */\r\n    public Appliance(){ }\r\n\r\n    /**\r\n     * Constructor for objects of class Appliance used when the initial information is provided\r\n     */\r\n    public Appliance (String manufacturer, String model, String serial)\r\n    {\r\n        this.model=model;\r\n        this.serial=serial;\r\n        this.setManufacturer(manufacturer);\r\n    }\r\n\r\n    /**\r\n     * The method adds Serial Number, Model Number and Manufacturer Name to the object.\r\n     * @param String manufacturer - manufacturer name (Bosch, GE, etc.).\r\n     * @return nothing.\r\n     * \r\n     */\r\n    public void setAttributes (String manufacturer, String model, String serial)\r\n    \r\n    {\r\n        this.model=model;\r\n        this.serial=serial;\r\n        this.setManufacturer(manufacturer);\r\n    }\r\n\r\n    /**\r\n     * A setter for Model Number.\r\n     * @param Model Number as a string.\r\n     * @return nothing.\r\n     */\r\n    public void setModelNumber(String model)\r\n    {\r\n    \tthis.model=model;    \t\r\n    }\r\n    \r\n    /**\r\n     * A getter for Model Number.\r\n     * @return Model Number.\r\n     */\r\n    public String getModelNumber()\r\n    {\r\n        return model;\r\n    }\r\n    \r\n    /**\r\n     * A setter for Serial Number.\r\n     * @param Serial Number as a string.\r\n     * @return nothing.\r\n     */\r\n    public void setSerialNumber(String serial)\r\n    {\r\n    \tthis.serial=serial;    \t\r\n    }\r\n\r\n    /**\r\n     * A getter for Serial Number.\r\n     * @return Serial Number.\r\n     */\r\n    public String getSerialNumber()\r\n    {\r\n        return serial;\r\n    }\r\n    \r\n    /**\r\n     * A setter for Manufacturer Name.\r\n     * @param Manufacturer Name as a string.\r\n     * @return nothing.\r\n     */\r\n    public void setManufacturer(String manufacturer)\r\n    {\r\n    \tthis.manufacturer=manufacturer;    \t\r\n    }\r\n\r\n    /**\r\n     * A getter for Manufacturer Name.\r\n     * @return Manufacturer Name.\r\n     */\r\n\tpublic String getManufacturer() {\r\n\t\treturn manufacturer;\r\n\t}\r\n\r\n\r\n}\r\n```\r\n\r\n\r\n### Dishwasher\r\nIs a subclass of Aplliances. In addition to the superclass methods, this class keeps track of the parts available in stock, returns the number of parts left.\r\n\r\n```java  \r\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\n/**\r\n * Creates an object of a dishwasher, inherits from Appliance.\r\n *\r\n * @author (Kate Miz)\r\n * @version (1.01)\r\n */\r\n\r\npublic class Dishwasher extends Appliance\r\n{\r\n    private BufferedReader reader;\r\n    private HashMap <String, Integer> parts = new HashMap <String, Integer>();\r\n    public ArrayList<WorkOrder> history = new ArrayList<WorkOrder>();\r\n\r\n    public void findParts (String modelNumber)\r\n    {\r\n        String[] data;\r\n        try {\r\n            reader = new BufferedReader(new FileReader(\"washParts.csv\"));\r\n            String line=\"\";\r\n             while (line != null)\r\n                {\r\n                    line = reader.readLine();\r\n                    data=line.split(\",\");\r\n                    if (data[0].equals(modelNumber))\r\n                    {\r\n                    for (int i=1; i<data.length; i += 2){\r\n                       String temp = data[i+1];\r\n                       int number = Integer.parseInt(temp);\r\n                       if (number!=0)\r\n                       {\r\n                       parts.put(data[i], number);  \r\n                    }\r\n                     }\r\n                }\r\n            }\r\n            reader.close();\r\n        }\r\n        catch(FileNotFoundException e) {\r\n            System.out.println(\"File missing\");\r\n        }\r\n        catch(IOException e) {\r\n            System.out.println(\"NO!\");\r\n        }\r\n    }\r\n    \r\n    public HashMap<String, Integer> getParts()\r\n    {\r\n        return parts;\r\n    }\r\n    \r\n    public int numberOfParts (String partName)\r\n    {\r\n        return parts.get(partName);\r\n    }\r\n    \r\n    public ArrayList<WorkOrder> getHistory ()\r\n    {\r\n        return history;\r\n    }\r\n}\r\n```\r\n\r\nThe second Enum class is used to set schedule based on the same principle:\r\n\r\n```java\r\n    public enum Schedule {\r\n        MONDAY(\"Monday\"), TUESDAY(\"Tuesday\"), WEDNESDAY(\"Wednesday\"), THURSDAY(\"Thursday\"), FRIDAY(\"Friday\"), SATURDAY(\"Saturday\"), SUNDAY(\"Sunday\");\r\n        private String day;\r\n        private Schedule(String d) {\r\n            day = d;\r\n        }\r\n        \r\n        public String toString() {\r\n            return day;\r\n        }       \r\n    }\r\n\r\n...\r\n\r\n        public void setSchedule(String day)\r\n    {\r\n        boolean found = false;\r\n        for(Schedule d: Schedule.values()){\r\n            if (d.toString().equals(day)) {\r\n              schedule.add(d);\r\n              found=true;\r\n            }\r\n        }\r\n        if (!found)\r\n            schedule.add(Schedule.MONDAY);\r\n\r\n    }\r\n\r\n```\r\n\r\n## Use of ArrayLists and HashMaps\r\nThe current version of the application did not need any Arrays, ArrayLists were used instead.\r\nOne of the applications of ArrayLists was to keep track of a technician's skills:\r\n\r\n```java\r\n\r\n      private ArrayList<String> skills=new ArrayList<String>();\r\n\r\n      public void setSkills(String skill)\r\n    {\r\n      skills.add(skill);\r\n    }\r\n\r\n...\r\n   public ArrayList<String> getSkills()\r\n    {\r\n        return skills;\r\n    }\r\n\r\n```\r\n \r\nIn order to record paired values of parts names and number in the inventory HashMaps were used:\r\n\r\n```java\r\n    private HashMap <String, Integer> parts = new HashMap <String, Integer>();\r\n    public ArrayList<WorkOrder> history = new ArrayList<WorkOrder>();\r\n\r\n    public void findParts (String modelNumber)\r\n    {\r\n        String[] data;\r\n        try {\r\n            reader = new BufferedReader(new FileReader(\"washParts.csv\"));\r\n            String line=\"\";\r\n             while (line != null)\r\n                {\r\n                    line = reader.readLine();\r\n                    data=line.split(\",\");\r\n                    if (data[0].equals(modelNumber))\r\n                    {\r\n                    for (int i=1; i<data.length; i += 2){\r\n                       String temp = data[i+1];\r\n                       int number = Integer.parseInt(temp);\r\n                       if (number!=0)\r\n                       {\r\n                       parts.put(data[i], number);  \r\n                    }\r\n                     }\r\n                }\r\n            }\r\n            reader.close();\r\n        }\r\n        catch(FileNotFoundException e) {\r\n            System.out.println(\"File missing\");\r\n        }\r\n        catch(IOException e) {\r\n            System.out.println(\"NO!\");\r\n        }\r\n    }\r\n\r\n```\r\n\r\n## Algorithms to search for values\r\n\r\nThe use of HashMaps allowed then to use keys (Part Name) to retrieve values (Number in Stock) in the Dishwasher class:\r\n\r\n```java\r\n\r\n    public HashMap<String, Integer> getParts()\r\n    {\r\n        return parts;\r\n    }\r\n    \r\n    public int numberOfParts (String partName)\r\n    {\r\n        return parts.get(partName);\r\n    }\r\n\r\n```\r\n\r\nSimilarly, ArrayLists allowed to keep track of multiple values for skills in the Tech class:\r\n\r\n```java\r\n\r\n    public void techInfo()\r\n    {\r\n        System.out.println(\"Tech Name: \"+ firstName + \" \" + lastName);\r\n        System.out.println(\"Tech Domain: \" + type);\r\n        System.out.println(\"Skills: \");\r\n        for (String s: skills)\r\n        {\r\n            System.out.println(\"* \" + s);\r\n    }\r\n        System.out.println(\"Schedule: \");\r\n        for (Schedule d: schedule)\r\n        {\r\n            System.out.println(\"* \" + d);\r\n    }\r\n}\r\n\r\n```\r\n\r\n## Different method types\r\n\r\n### Constructors\r\nEvery class in the program has its constructor. The superclass Appliance uses overloading to cover both cases, when a user has no info and when a user has all the necessary info:\r\n\r\n```java\r\n\r\n    /**\r\n     * Constructor for objects of class Appliance used when no info about an appliance is provided\r\n     */\r\n    public Appliance(){ }\r\n    \r\n    /**\r\n     * Constructor for objects of class Appliance used when the initial information is provided\r\n     */\r\n    public Appliance (String manufacturer, String model, String serial)\r\n    {\r\n        this.model=model;\r\n        this.serial=serial;\r\n        this.setManufacturer(manufacturer);\r\n    }\r\n\r\n```\r\n\r\n### Getters and Setters\r\nAre used in every class to allow adding and retrieving values:\r\n\r\n```java\r\n\r\n\r\n    public int getID()\r\n    {\r\n        return id;\r\n    }\r\n\r\n    public Date setDate()\r\n    {\r\n        Date date = new Date();\r\n        return date;\r\n    }\r\n\r\n    public void setDescription(String description)\r\n    {\r\n        this.description = description;\r\n    }\r\n\r\n    public String getDescription()\r\n    {\r\n        return description;\r\n    }\r\n\r\n    public void setBriefDescription(String briefDescription)\r\n    {\r\n        this.briefDescription = briefDescription;\r\n    }\r\n\r\n    public String getBriefDescription()\r\n    {\r\n        return briefDescription;\r\n    }\r\n\r\n```\r\n\r\n### ToString methods\r\nThe Class Company has a toString method used to easily get basic information:\r\n\r\n```java\r\n\r\n\tpublic String toString()\r\n\t{\r\n\t\treturn (\"Your company: \" + Company.name + \"\\n\" + \"Your comapny has \" + numberOfTechs + \":\" + \"\\n\");\r\n\t}\r\n\r\n```\r\n\r\n### Use of static variables\r\nThe Class WorkOrder uses a static variable for the increment value to generate IDs. This allows keep track of the increment vithout calling an object:\r\n\r\n```java\r\npublic class WorkOrder\r\n{\r\n    private final int ID=1000;\r\n    private static int increment = 0;\r\n    \r\n    public void setID()\r\n    {\r\n        id=ID+increment;\r\n        this.increment++;\r\n    }\r\n\r\n```\r\n\r\n## UML Diagram and Use Cases\r\n![UML](https://lh3.googleusercontent.com/-anNHokI2Gm4/VnAXuSTVP9I/AAAAAAAABQg/yHZevhVtESE/s912-Ic42/UMLDiagram.png)\r\n\r\n![UseCase1](https://lh3.googleusercontent.com/-dmMfZoWjWCM/VnAaDEb3qII/AAAAAAAABRE/QuUQdFt4h8Y/s912-Ic42/UseClass1.jpg)\r\n\r\n![Use Case 2](https://lh3.googleusercontent.com/-AklXcfXDmZQ/VnAaDEsa8xI/AAAAAAAABRA/9hZGTJazR4s/s912-Ic42/UseClass2.png.jpg)\r\n\r\n## Inheritances and Aggregations\r\nThe current version of the Application has 2 groups of inheritances:\r\nAppliance ->Dishwasher, Fridge, Dryer\r\nPerson -> User, Tech\r\n\r\nAggregations: WorkOrder \"has-a\" Property \"has-a\" Appliance.\r\n\r\n## Use of exceptions\r\nExceptions are used throughout the appliacation. One of them is used to validate e-mail address of a user:\r\n\r\n```java\r\n\r\n         /** \r\n         * Sets the valid email address.\r\n         * \r\n         * @param email address as a sring.\r\n         * @throws IlligalArgumentException if the email address does not contain \"@\" or \".\"\r\n         */\r\n        public String emailValidation(String email) {\r\n\r\n        if (!email.contains(\"@\"))\r\n        {\r\n            // Enforce preconditions specified above\r\n            throw new IllegalArgumentException(\"Please, enter a valid e-mail address\");\r\n        }\r\n        return email;\r\n    }\r\n\r\n```\r\n\r\n## File I/O\r\nBufferedReader (File in) is mainly used to have access to an Excel file with inventory to keep track of parts:\r\n\r\n```java\r\n\r\n    public void findParts (String modelNumber)\r\n    {\r\n        String[] data;\r\n        try {\r\n            reader = new BufferedReader(new FileReader(\"washParts.csv\"));\r\n            String line=\"\";\r\n             while (line != null)\r\n                {\r\n                    line = reader.readLine();\r\n                    data=line.split(\",\");\r\n                    if (data[0].equals(modelNumber))\r\n                    {\r\n                    for (int i=1; i<data.length; i += 2){\r\n                       String temp = data[i+1];\r\n                       int number = Integer.parseInt(temp);\r\n                       if (number!=0)\r\n                       {\r\n                       parts.put(data[i], number);  \r\n                    }\r\n                     }\r\n                }\r\n            }\r\n            reader.close();\r\n        }\r\n        catch(FileNotFoundException e) {\r\n            System.out.println(\"File missing\");\r\n        }\r\n        catch(IOException e) {\r\n            System.out.println(\"NO!\");\r\n        }\r\n    }\r\n\r\n```\r\n\r\nFileWriter is used to save the info about a company:\r\n\r\n```java\r\n\r\npublic class Company\r\n{\r\n    ArrayList<Tech> techs = new ArrayList<Tech>();\r\n    String answer;\r\n    static String name;\r\n    int techsNumber;\r\n    int dispNumber;\r\n    FileReader in = null;\r\n    FileWriter out = null;\r\n    public static int numberOfTechs;\r\n\r\n    public Company(String name) throws IOException\r\n    {\r\n        Company.name=name;\r\n        out = new FileWriter(\"company.txt\");\r\n        out.write(\"The company name: \" + name);\r\n        out.write(System.lineSeparator());\r\n        out.close();\r\n\r\n}\r\n\r\n    public ArrayList<Tech> addTechnicains (int numberOfTechs) throws IOException\r\n    {\r\n        Company.numberOfTechs = numberOfTechs;\r\n    \tfor (int i=0; i<numberOfTechs; i++)\r\n        {\r\n            Tech tech = new Tech();\r\n            tech.createTech();\r\n            out = new FileWriter(\"company.txt\", true);\r\n            out.write(name + \" has \" + numberOfTechs + \" techs\");\r\n            out.write(System.lineSeparator());\r\n            out.write(\"Technician \" + i+1 + \":\");\r\n            out.write(System.lineSeparator());\r\n            out.write(tech.firstName + \" \" + tech.lastName);\r\n            out.write(System.lineSeparator());\r\n    }\r\n            out.close();\r\n            return techs;\r\n    }\r\n\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}